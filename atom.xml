<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://norwayrainz.github.io</id>
    <title>Jamie的奥兹海默症预防针</title>
    <updated>2023-02-01T16:33:37.270Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://norwayrainz.github.io"/>
    <link rel="self" href="https://norwayrainz.github.io/atom.xml"/>
    <subtitle>想在海里跑</subtitle>
    <logo>https://norwayrainz.github.io/images/avatar.png</logo>
    <icon>https://norwayrainz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Jamie的奥兹海默症预防针</rights>
    <entry>
        <title type="html"><![CDATA[记录被自己蠢哭的3个小时]]></title>
        <id>https://norwayrainz.github.io/post/ji-lu-bei-zi-ji-chun-ku-de-3-ge-xiao-shi/</id>
        <link href="https://norwayrainz.github.io/post/ji-lu-bei-zi-ji-chun-ku-de-3-ge-xiao-shi/">
        </link>
        <updated>2023-02-01T15:08:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="事情是这样的">😭事情是这样的</h1>
<pre><code>在写毕设的feature，想添加一个以新表以track_id作为主标主键track_id的外键，
然后通过记录时间戳来记录创建、更新、及史低价格变更的时间来实现价格曲线图。
</code></pre>
<p>这么一个简单的功能，由于和代码已是最熟悉的陌生人，plus，焦虑和水群，再上完菲教口语课之后的3个多小时才大概写了点东西。</p>
<h2 id="4个小时就干了这点事">😩4个小时就干了这点事</h2>
<ol>
<li>建好了表结构(呵呵，是我以为我建好了，事实证明我是小丑🤡</li>
<li>在看了油管上一个关于构件规范化project structure的视频之后，解耦了一些函数。</li>
<li>建立了新表的结构体（踩了不看文档的坑</li>
<li>测试+修bug</li>
</ol>
<h2 id="罪魁祸首是">😤罪魁祸首是</h2>
<p><strong><font color=red>gorm框架的约定</font></strong><br>
由于没有熟读文档，自己对于命名不够规范导致我创建的表结构和结构体并不匹配，一点都不丝滑。<br>
主结构体Movie是刚立项的时候写的，已经过于久远，所以已经忘记了gorm的创建规则，然后我又照抄来着，所以新结构体写的是MoiveDetail。<br>
<img src="https://norwayrainz.github.io/post-images/1675267096303.png" alt="" loading="lazy"><br>
最后在跑的时候数据库的报错是 PostgreSQL error 42P01，也就是说movie_details这个表不存在。我在这里卡了好久，以为我在数据库里新建的表名叫 track_price_detail。</p>
<hr>
<p>(这条报错没截图，用后面类似的截图来解释一下，错误是一样的，命名不够规范，结构体和表里的字段对不上)<br>
<img src="https://norwayrainz.github.io/post-images/1675267649029.png" alt="" loading="lazy"></p>
<hr>
<p>所以问题就出现在这里，苦苦谷歌+百度（找错了方向😢），最后才想到要不就把结构体改成TrackPriceDetail吧，<br>
果真报错变成了track_price_details这个表不存在，<br>
那么。<br>
<strong><font color=red>真相只有一个！</font></strong></p>
<h4 id="结构体创建并插入数据库一定有一个规则">💡“结构体创建并插入数据库一定有一个规则！”</h4>
<p>然后去找了gorm的官方文档，果然，如果结构体命名为User 那么对应的数据库表名为users，多个单词将会转化为蛇型命名且最后会加s<br>
[<a href="https://gorm.io/zh_CN/docs/conventions.html">gorm约定</a>]</p>
<p>果然，最后改了结构体名称之后就成功插入新数据了。</p>
<h1 id="总结">📝总结</h1>
<p>好好看框架文档！！！！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[#踩坑日记#迫于移植接口，踩了前人留的坑]]></title>
        <id>https://norwayrainz.github.io/post/cai-keng-ri-ji-po-yu-yi-zhi-jie-kou-cai-liao-qian-ren-liu-de-keng/</id>
        <link href="https://norwayrainz.github.io/post/cai-keng-ri-ji-po-yu-yi-zhi-jie-kou-cai-liao-qian-ren-liu-de-keng/">
        </link>
        <updated>2021-11-10T07:37:16.000Z</updated>
        <content type="html"><![CDATA[<h2 id="️移植代码">✍️移植代码</h2>
<h4 id="接到的任务是完成-今日历史订单成交接口的移植">💪接到的任务是完成 今日/历史订单成交接口的移植</h4>
<p>移植前和移植后的差别在于移植前的数据是双重加密过的，移植目标的需求少一层加密，就按照已有接口照葫芦画瓢，边写边理解代码。</p>
<p>以下是中间反复定位错误和改bug的过程</p>
<ol>
<li>
<h5 id="反复对照params_check">反复对照params_check()</h5>
<p>由于报错出现在参数校验的位置所以就在反复看这块的的代码和json数据，但其实没有什么东西可看所以浪费了很久时间，错误并不出在这里。</p>
</li>
<li>
<h5 id="根据日志发现request的不同">根据日志发现request的不同</h5>
<p>发现代码暂时没问题后发现原接口是可以跑成功的，所以理论上request相同的话就能成功，于是我将两个接口的request日志打出</p>
<figure data-type="image" tabindex="1"><img src="https://norwayrainz.github.io/post-images/1636530636322.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://norwayrainz.github.io/post-images/1636530628791.png" alt="" loading="lazy"></figure>
<p>从中发现data主体数据都是对的，就是移植代码由于加密函数不同，数据套在了一层data的里面，但在前面params_check()中处理过了，所以问题不在这里。</p>
</li>
<li>
<h5 id="找到传入hs接口的request格式">找到传入hs接口的request格式</h5>
<p>在params_check()后会call一个process_request() 这个函数通过nginx.location传递数据到恒生的402接口</p>
</li>
</ol>
<pre><code>local res402 = ngx.location.capture_multi{{ &quot;/hs/QueryHistoryDeliver_915&quot;, { method = ngx.HTTP_POST, body = cjson.encode({data = request}) } }} 
</code></pre>
<p>就用2中相同的方法在日志中定位 这里传的request长什么样</p>
<ol start="4">
<li>
<h5 id="找到问题在整个外层多套了一层data">找到问题在整个外层多套了一层data</h5>
<p>日志中发现了答案，这个request就是在图2中的request外层多了一个data{}，</p>
<p>难怪恒生的params_check()中也报了参数校验的问题</p>
</li>
<li>
<h5 id="data-requestdata-提出data内容解决问题">data = request[&quot;data&quot;] 提出data内容解决问题</h5>
<p>既然找到了问题所在，就去解决它，这个点其实很容易，由于这边把整个request给了data，导致最终有两层data，那就把request中data里的数据赋给data，大功告成！</p>
</li>
</ol>
<h2 id="recap">😎Recap</h2>
<p>首先，我对照前人写好的代码进行移植，发现他这个参数起名不太规范，明明 俩功能一样的函数，移植之后还换了变量名，由于我也不知道什么情况就没敢动，然后发现还有漏打日志的...种种奇葩代码，然后就是基本是没有注释的，读起来真的非常困难，哎。不过总算是解决了这个问题，以后还是要多打日志定位错误，还是不断踩坑不断进步吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[#踩坑日记# 记一次git 绕过不明bug]]></title>
        <id>https://norwayrainz.github.io/post/caikengdiary1/</id>
        <link href="https://norwayrainz.github.io/post/caikengdiary1/">
        </link>
        <updated>2021-11-01T13:42:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="gitlab就不能clone-密码我也输了啊-整个大无语">🙅Gitlab就不能clone 密码我也输了啊 整个大无语</h1>
<h2 id="事情是这样的">事情是这样的</h2>
<p>师父给我小任务改代码，结果发现不能clone项目，一开始还以为是权限的问题，结果找了后台管理员发现我账号没问题但就是说我输密码不对，但是网页是正常登录的，最后是在师父电脑上登了我的账号之后我再clone就正常了，离谱吧。<br>
就这么迷迷糊糊的过了周末，今天上班clone新代码的时候又来，clone输入密码后失败。好家伙，我这次退了重新登录，网页版依然没问题，我就纳闷儿了。搜了一波报错的解决方案，说是sshkey的问题，折腾了半天，发现有一个3年钱的sshkey，好家伙，会不会就是因为这个key的密码和我mac账户的密码不一样，<br>
所以失败啊🙄。<br>
就参考了大佬们和gitlab官方的方法生成新的sshkey。</p>
<ol>
<li>就不检查已存在的sshkey了 就是因为这个key有问题才踩坑的（吧？）</li>
<li>生成新的sshkey<pre><code class="language-shell">% ssh-keygen -t ed25519 -C &quot;&lt;comment&gt;&quot; 
#ed25519 是一种加密算法 可以选择RSA等 comment 内容会出现在.pub（公钥）文件中
</code></pre>
</li>
<li>然后连按3次回车 存在默认路径就好</li>
<li>输入<pre><code class="language-shell">cat ~/.ssh/id_ed25519.pub
# ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc...
</code></pre>
</li>
<li>ssh开头的内容到邮箱结束都是公钥的内容全都复制下来</li>
<li>到gitlab的页面粘贴 再给这个sshkey一个名字就好。</li>
<li>私钥再没有pub后缀的同名文件里，要保护好。</li>
<li>最后<pre><code class="language-shell">ssh -T git@xxx.com
# 如果看到successfully 那恭喜你嘿嘿！
</code></pre>
</li>
</ol>
<h2 id="这样就可以正常clone啊什么的了">👍这样就可以正常clone啊什么的了</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSO单点登录]]></title>
        <id>https://norwayrainz.github.io/post/sso/</id>
        <link href="https://norwayrainz.github.io/post/sso/">
        </link>
        <updated>2021-09-16T01:49:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="为什么要有ssosingle-signon">🤔为什么要有sso（single signon）</h1>
<p>sso单点登录保证了一个账户在多个系统上实现单一用户的登录，<br>
由于现在网站系统越来越复杂，内容、服务都越来越多，不同的服务之间的通信，<br>
如何让用户不用重复登录就可以访问用以顶域下的所有服务呢，现在比较流行的方案就是sso。</p>
<h1 id="实现sso">🔑实现sso</h1>
<p>在server端是根据sessionId来判断用户，client端携带cookie告知服务端身份,<br>
用户注册登录知乎把用户相关信息存入redis，设置过期时间，key为一个token，使用uuid，uuid生成后<br>
存入cookie中，登录后需要重置redis和cookie的失效时间。</p>
<h1 id="sso原理">📔sso原理</h1>
<p>CAS标准流程<br>
<img src="https://norwayrainz.github.io/post-images/1631758462027.png" alt="" loading="lazy"></p>
<ol>
<li>用户访问某需要登录验证的App系统</li>
<li>被验证失败 则302重定向到CAS系统（sso系统），并将参数encode到URL中，sso系统发现未用户无登录session，跳转到sso验证</li>
<li>用户填写登录sso，登陆信息及login ticket，post到body中，验证成功后生成sso session，CASTGC（ticket granting cookie)含有Ticket Granting Ticket（TGT）,TGE作为sso session的session key，service ticket传给用户</li>
<li>持有ST跳转到要访问的App系统，App系统请求CAS server验证ST有效性</li>
<li>CAS验证通过返回 200 + 包含成功信息和已验证的主和任意参数的XML文档给App系统</li>
<li>App系统写入session 状态设置域下cookie, 并除去ST信息 防止地址栏泄露</li>
<li>再次访问时携带cookie即登录状态</li>
<li>访问App2时，跳转到CAS server验证cookie中的TGT 成功则携带ST返回</li>
<li>携带ST访问App2，aap2 请求CAS server验证ST</li>
<li>返回200 + XML文档</li>
<li>App2 建立session，生成域内cookie 返回</li>
<li>用户携带cookie访问 成功</li>
</ol>
<h1 id="总结">📝总结</h1>
<ol>
<li>sso保障各业务用户资源安全</li>
<li>避免用户重复登录</li>
<li>ST需要CAS server验证有效性 防止用户伪造</li>
<li>TGT在访问不同App的时候带上可以交给sso验证是否为同一个用户</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言排序——快速排序]]></title>
        <id>https://norwayrainz.github.io/post/GoQuickSort/</id>
        <link href="https://norwayrainz.github.io/post/GoQuickSort/">
        </link>
        <updated>2021-08-20T13:42:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="算法讲解">💡算法讲解</h1>
<p>快速排序是Charles Antony Richard Hoare，(东尼·霍尔) 在 1962 年提出，来改进冒泡排序的算法。<br>
是分治和递归思想在排序算法中的应用</p>
<p>1 在待排序的数列中，选择一个元素作为pivot将数列分成两个区域<br>
2 默认将pivot左边的区域放入比pivot小的数，右边则放入比pivot大的数，相同的数可以任意放在一边，操作完后，pivot将会在排序完成后的最终位置上，这个称作为partition（分区）操作。<br>
3 每个区域内各自递归</p>
<h2 id="特点">特点</h2>
<p>一般情况下排序n个元素需要O(nlogn)次,最坏的情况下每次都取到最大或最小值需要O(n^2)次</p>
<h1 id="代码实现">代码实现</h1>
<pre><code class="language-go">func quickSort(nums []int, left, right int) {
    if left &lt; right {
        pivot := partition(nums, left, right)
        //左半区
        quickSort(nums, left, pivot - 1)
        //右半区
        quickSort(nums, pivot+1, right)
    }
}
func partition(nums []int, left, right int) int {
    pivot := nums[left]//默认以第一个数为基准
    for left &lt; right {
        //右指针值&gt;pivot时左移
        for left &lt; right &amp;&amp; pivot &lt;= nums[right]{
            right--
        }
        //右指针值&lt;pivot时与nums[left]交换
        nums[left] = nums [right]
        //左指针值&lt;pivot时右移
        for left &lt; right &amp;&amp; pivot &gt;= nums[left]{
            left++
        }
        //左指针值&gt;pivot时与nums[right]交换
        nums[right] = nums[left]
    }
    //返回基准值的索引,为最终顺序
    nums[left] = pivot
    return left
}
//测试
func TestQuickSort(t *testing.T) {
    nums := []int {2,44,4,8,33,1,22,-11,6,34,55,54,9}
    quickSort(nums,0, len(nums) - 1)
    t.Log(nums)
}
</code></pre>
<h2 id="细节">🔸细节</h2>
<p>以左侧第一个数为基准时，必须先从右侧开始扫描，最后和基准互换位置时才不会出现左侧有数比基准大的情况，例如：<br>
<font color = "green" size = "5"> i                 j</font><br>
<font color = "green" size = "8">6,1,2,7,9</font></p>
<p>如上所示<br>
当<code>for left &lt; right &amp;&amp; pivot &lt;= nums[right]</code>时<br>
j在扫描到7之后会往左走一个，即2，<br>
当i到1时符合循环，往右走一个即2，此时不再满足i &lt; j 则停止。<br>
此时i所在的元素是比最左元素小的 交换后正确。<br>
若从左边先扫描 i 在扫描到2时满足循环，继续向右走一个，即7，<br>
此时j也会停在7的位置，若7与最左元素6交换显然不符合左侧都小于基准元素的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go语言排序——总结]]></title>
        <id>https://norwayrainz.github.io/post/go-yu-yan-pai-xu-zong-jie-nei-bu-pai-xu-1/</id>
        <link href="https://norwayrainz.github.io/post/go-yu-yan-pai-xu-zong-jie-nei-bu-pai-xu-1/">
        </link>
        <updated>2021-07-19T08:57:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="关于为什么学go">🤔关于为什么学Go</h1>
<p>自从面字节被虐了之后得知后台都用的Go就打算转Go了。其实也是Java卷不动了，早转晚转都得转，不如现在转！<br>
然后在默默学习Go的过程中感觉到Go还是有很多优势的比如说语法简单什么的，然后也尝试用Go去刷</p>
<p><strong>LeetCode</strong> 。刷到以前写过的题就会用Go去重写一遍，慢慢就爱上了这个语言，那就用他来巩固知识吧</p>
<h2 id="排序">👇排序</h2>
<p>排序故名思意就是一种目的是将乱序的元素排列成有序的状态，八大排序算法都属于内部排序，即数据全部记录在内存中无需访问外存。</p>
<h3 id="稳定排序">稳定排序</h3>
<p>稳定的排序算法会让键值相等的记录维持相同的次序，排序前后相对位置不变，以下列举了要细说的排序算法</p>
<ul>
<li>冒泡排序(Bubble sort)</li>
<li>插入排序(Insertion sort)</li>
<li>归并排序(Merge sort)</li>
<li>基数排序(Radix sort)</li>
<li>桶排序(Bucket sort)</li>
</ul>
<h3 id="非稳定排序">非稳定排序</h3>
<ul>
<li>选择排序(Select sort)</li>
<li>希尔排序(Shell sort)</li>
<li>堆排序(Heap sort)</li>
<li>快速排序(Quick sort)</li>
</ul>
<!-- 中间应该会贴上写好的文章的链接在这里 -->
<h2 id="️总结">✍️总结</h2>
<table>
<thead>
<tr>
<th style="text-align:center">Algorithm</th>
<th style="text-align:center">Best</th>
<th style="text-align:center">Average</th>
<th style="text-align:center">Worst</th>
<th style="text-align:center">Stability</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Quick sort</td>
<td style="text-align:center">O(n log(n))</td>
<td style="text-align:center">O(n log(n))</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">❌</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
</feed>